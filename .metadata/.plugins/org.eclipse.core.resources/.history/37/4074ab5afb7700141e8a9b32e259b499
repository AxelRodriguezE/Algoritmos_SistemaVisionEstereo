#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>
#include <ctype.h>

using namespace std;
using namespace cv;

/// Global Variables
Mat img; Mat templ; Mat result;

int match_method;
int max_Trackbar = 5;

/// Function Headers
void MatchingMethod( int, void* );

/**
 * @function main
 */
int main( int, char** argv )
{

//	ifstream ar("Archivo.txt");
//	char linea [50];
//
//	while(!ar.eof())
//	{
//		char *ptr;
//
//		ar.getline(linea,50);
//		cout << linea << endl;
//
//		ptr = strtok(linea," ");
//
//		cout << ptr << endl;
//
//

	int cont_temp = 0;

	while(true)
	{
		stringstream plantilla;
		plantilla << "plantilla_" << cont_temp << ".png";

		cont_temp++;

		img = imread(argv[1], 1);
		templ = imread(plantilla.str());

		if(templ.empty())
			return false;
		else
		{
			imshow( "Deteccion", templ );
		}


//		char *hola = "imagen_lata.png";

		/// Load image and template

		/// Create Trackbar
//		const char* trackbar_label = "Method: \n 0: SQDIFF \n 1: SQDIFF NORMED \n 2: TM CCORR \n 3: TM CCORR NORMED \n 4: TM COEFF \n 5: TM COEFF NORMED";
//		createTrackbar( trackbar_label, image_window, &match_method, max_Trackbar, MatchingMethod );

		//MatchingMethod( 0, 0 );
	}

	waitKey(0);
	return 0;
}

/**
 * @function MatchingMethod
 * @brief Trackbar callback
 */

void MatchingMethod( int, void* )
{
	/// Source image to display
	Mat img_display;
	img.copyTo( img_display );

	/// Create the result matrix
	int result_cols =  img.cols - templ.cols + 1;
	int result_rows = img.rows - templ.rows + 1;

	result.create( result_cols, result_rows, CV_32FC1 );

	/// Do the Matching and Normalize
	matchTemplate( img, templ, result, match_method );
	normalize( result, result, 0, 1, NORM_MINMAX, -1, Mat() );

	/// Localizing the best match with minMaxLoc
	Point minLoc; Point maxLoc;
	Point matchLoc;
	double minVal; double maxVal;

	for(int k=1;k<=3;k++)
	{
		minMaxLoc( result, &minVal, &maxVal, &minLoc, &maxLoc, Mat() );

		// Lowest matches
		if( match_method  == CV_TM_SQDIFF || match_method == CV_TM_SQDIFF_NORMED )
		{
			result.at<float>(minLoc.x,minLoc.y)=1.0;
			result.at<float>(maxLoc.x,maxLoc.y)=1.0;
		}
		else
		{
			result.at<float>(minLoc.x,minLoc.y)=0.0;
			result.at<float>(maxLoc.x,maxLoc.y)=0.0;
		}

		/// For SQDIFF and SQDIFF_NORMED, the best matches are lower values. For all the other methods, the higher the better
		if( match_method  == CV_TM_SQDIFF || match_method == CV_TM_SQDIFF_NORMED )
		{
			matchLoc = minLoc;
		}
		else
		{
			matchLoc = maxLoc;
		}
		/// Show me what you got
		rectangle( img_display, matchLoc, Point( matchLoc.x + templ.cols , matchLoc.y + templ.rows ), Scalar::all(0), 2, 8, 0 );
		rectangle( result, matchLoc, Point( matchLoc.x + templ.cols , matchLoc.y + templ.rows ), Scalar::all(0), 2, 8, 0 );
	}

	/// Create windows
	namedWindow( "Deteccion", WINDOW_AUTOSIZE );
	namedWindow( "Resultado", WINDOW_AUTOSIZE );
	imshow( "Deteccion", img_display );
	imshow( "Resultado", result );

	return;
}
