#include <opencv2/opencv.hpp>
#include <opencv2/gpu/gpu.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/calib3d/calib3d.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/contrib/contrib.hpp>
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <opencv/cxmisc.h>
#include <opencv/cvaux.h>
#include <vector>
#include <string>
#include <algorithm>
#include <ctype.h>

using namespace std;
using namespace cv;

void correspondenciaBIRCHFIELD(Mat &imagenIzq, Mat &imagenDer)
{
	IplImage _srcLeft = imagenIzq;
	IplImage _srcRight = imagenDer;
	IplImage* srcLeft = &_srcLeft;
	IplImage* srcRight = &_srcRight;
	IplImage* leftImage = cvCreateImage(cvGetSize(srcLeft), IPL_DEPTH_8U, 1);
	IplImage* rightImage = cvCreateImage(cvGetSize(srcRight), IPL_DEPTH_8U, 1);
	IplImage* depthImage = cvCreateImage(cvGetSize(srcRight), IPL_DEPTH_8U, 1);

	cvCvtColor(srcLeft, leftImage, CV_BGR2GRAY);
	cvCvtColor(srcRight, rightImage, CV_BGR2GRAY);

	cvFindStereoCorrespondence( leftImage, rightImage, CV_DISPARITY_BIRCHFIELD, depthImage, 50, 15, 3, 6, 8, 15);

	Mat MapaDipBIRCHFIELD(depthImage);

	imshow("Mapa de Disparidad BIRCHFIELD", MapaDipBIRCHFIELD);
	imwrite("MapaDisparidad.png", MapaDipBIRCHFIELD);

	cout << "Disparidad(1,1)=" << MapaDipBIRCHFIELD.at<double>(1,1) << endl;

	//...

	Mat Q = Mat(4, 4, CV_64F);

	FileStorage fs2("stereocalib.yml", FileStorage::READ);
	fs2["Q"] >> Q;
	fs2.release();

	double Q00, Q01, Q02, Q03, Q10, Q11, Q12, Q13, Q20, Q21, Q22, Q23, Q30, Q31, Q32, Q33;
	Q00 = Q.at<double>(0,0);
	Q01 = Q.at<double>(0,1);
	Q02 = Q.at<double>(0,2);
	Q03 = Q.at<double>(0,3);
	Q10 = Q.at<double>(1,0);
	Q11 = Q.at<double>(1,1);
	Q12 = Q.at<double>(1,2);
	Q13 = Q.at<double>(1,3);
	Q20 = Q.at<double>(2,0);
	Q21 = Q.at<double>(2,1);
	Q22 = Q.at<double>(2,2);
	Q23 = Q.at<double>(2,3);
	Q30 = Q.at<double>(3,0);
	Q31 = Q.at<double>(3,1);
	Q32 = Q.at<double>(3,2);
	Q33 = Q.at<double>(3,3);

	cout << "Q(0,0) = " << Q00 << " Q(0,1) = " << Q01 << " Q(0,2) = " << Q02 << " Q(0,3) = "<< Q03 <<
			" Q(1,0) = " << Q10 << " Q(1,1) = " << Q11 << " Q(1,2) = " << Q12 << " Q(1,3) = "<< Q13 <<
			" Q(2,0) = " << Q20 << " Q(2,1) = " << Q21 << " Q(2,2) = "<< Q22 << " Q(2,3) = " << Q23 <<
			" Q(3,0) = " << Q30 << " Q(3,1) = " << Q31 << " Q(3,2) = "<< Q32 <<" Q(3,3) = "<< Q33 << endl;

	histograma(MapaDipBIRCHFIELD);

//
//	  Mat recons3D(MapaDipBIRCHFIELD.size(), CV_32FC3);
//	  //Reproject image to 3D
//	  cout << "Reprojecting image to 3D..." << endl;
//	  reprojectImageTo3D( MapaDipBIRCHFIELD, recons3D, Q, false, CV_32F );
//	  imshow("algo xD", recons3D);
//
//	  	FileStorage storage("MapaDipBIRCHFIELD.yml", FileStorage::WRITE);
//	  	for(int i=0; i<MapaDipBIRCHFIELD.rows; i++)
//	  	{
//	  		for(int j=0; j<MapaDipBIRCHFIELD.cols; j++)
//	  		{
//	  			storage << "MapaDipBIRCHFIELD" << recons3D.at<double>(i,j);
//	  		}
//	  	}
//	  	storage.release();
}

int main(int argc, char *argv[])
{
	Mat imagenIzq = imread("imgLeftRect.png");
	Mat imagenDer = imread("imgRightRect.png");

	correspondenciaBIRCHFIELD(imagenIzq, imagenDer);

	waitKey(0);
	return 0;
}


