#include <opencv2/opencv.hpp>
#include <opencv2/gpu/gpu.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/calib3d/calib3d.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/contrib/contrib.hpp>
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <opencv/cxmisc.h>
#include <opencv/cvaux.h>
#include <vector>
#include <string>
#include <algorithm>
#include <ctype.h>
#include <ctime>
#include <sys/timeb.h>

using namespace std;
using namespace cv;

void correspondenciaSGBM(Mat &imagenIzq, Mat &imagenDer)
{
	Mat MapaDispSGBM, MapaDispSGBM_Norm;

//	Mat Q = Mat(4, 4, CV_64F);
//	FileStorage q("Q.xml", FileStorage::READ);
//	q["Q"] >> Q;
//	q.release();

	StereoSGBM stereoSGBM;

	stereoSGBM.SADWindowSize = 2;
	stereoSGBM.numberOfDisparities = 192;
	stereoSGBM.preFilterCap = 2;
	stereoSGBM.minDisparity = -50;
	stereoSGBM.uniquenessRatio = 2;
	stereoSGBM.speckleWindowSize = 300;
	stereoSGBM.speckleRange = 2;
	stereoSGBM.disp12MaxDiff = 20;
	stereoSGBM.fullDP = false;
	stereoSGBM.P1 = 1200;
	stereoSGBM.P2 = 3000;

	stereoSGBM(imagenIzq, imagenDer, MapaDispSGBM);

	int64 t = getTickCount();
	t = getTickCount() - t;
	cout << "Time elapsed: " << t*1000/getTickFrequency() << endl;

	//Inicio experimento...
    Mat imgDisparity16S = Mat(imagenIzq.rows, imagenIzq.cols, CV_16S);
    Mat imgDisparity8U = Mat(imagenIzq.rows, imagenIzq.cols, CV_8UC1);

    stereoSGBM(imagenIzq, imagenDer, imgDisparity16S);

    double minVal; double maxVal;

    minMaxLoc(imgDisparity16S, &minVal, &maxVal);

    cout << "Min disp: " << minVal << "Max value: " << maxVal << endl;

    //Display it as a CV_8UC1 image
    imgDisparity16S.convertTo(imgDisparity8U, CV_8UC1, 255/(maxVal - minVal));

	int intensity = imgDisparity8U.at<uchar>(272,518);
	cout << intensity << endl;

//	circle(imgDisparity8U, Point(294,409), 6, Scalar(150,0,0), 1);
//	putText(imgDisparity8U, "Punto(294,409)", Point(304,409), FONT_HERSHEY_SIMPLEX, 0.5, CV_RGB(125,12,145), 1);
//	circle(imgDisparity8U, Point(121,242), 6, Scalar(150,0,0), 1);
//	putText(imgDisparity8U, "Punto(121,242)", Point(131,242), FONT_HERSHEY_SIMPLEX, 0.5, CV_RGB(125,12,145), 1);
//	circle(imgDisparity8U, Point(518,272), 6, Scalar(150,0,0), 1);
//	putText(imgDisparity8U, "Punto(518,272)", Point(508,292), FONT_HERSHEY_SIMPLEX, 0.5, CV_RGB(125,12,145), 1);
//	circle(imgDisparity8U, Point(392,243), 6, Scalar(150,0,0), 1);
//	putText(imgDisparity8U, "Punto(392,243)", Point(402,243), FONT_HERSHEY_SIMPLEX, 0.5, CV_RGB(125,12,145), 1);

    imshow("imgDisparity8U", imgDisparity8U);
    imwrite("MapaDisparidad_SGBM.png", imgDisparity8U);
    //...Fin experimento
}

int main(int argc, char *argv[])
{
	Mat imagenIzq = imread("imgLeftRect.png");
	Mat imagenDer = imread("imgRightRect.png");

    clock_t startC, finishC;
    struct timeb startT, finishT;
    unsigned int elements=100000;
    unsigned int operations=10000;
    unsigned int seconds, milliseconds;

    startC = clock();
    ftime(&startT);

	correspondenciaSGBM(imagenIzq, imagenDer);

    finishC = clock();
    ftime(&finishT);
    seconds = finishT.time - startT.time - 1;
    milliseconds = (1000 - startT.millitm) + finishT.millitm;

    cout << "Time (clock): "    << (finishC - startC)/CLOCKS_PER_SEC << endl;
    cout << "Time (difftime): " << difftime(finishC, startC) << endl;
    cout << "Time (ftime): " << (milliseconds + seconds * 1000) << endl;

	waitKey(0);
	return 0;
}


