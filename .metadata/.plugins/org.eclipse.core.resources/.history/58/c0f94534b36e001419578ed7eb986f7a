#include <opencv2/opencv.hpp>
#include <opencv2/gpu/gpu.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/calib3d/calib3d.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/contrib/contrib.hpp>
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <opencv/cxmisc.h>
#include <opencv/cvaux.h>
#include <vector>
#include <string>
#include <algorithm>
#include <ctype.h>

using namespace std;
using namespace cv;

void correspondenciaBM(Mat &imagenIzq, Mat &imagenDer)
{
	Mat imagenIzq1CH, imagenDer1CH, g_disp;

	Mat MapaDispBM(imagenIzq.size().height, imagenIzq.size().width, CV_16S, Scalar(0));
	Mat MapaDispBM_Norm(imagenIzq.size().height, imagenIzq.size().width, CV_8U, Scalar(0));

	StereoBM stereoBM;

	stereoBM.state->SADWindowSize = 9;
	stereoBM.state->numberOfDisparities = 112;
	stereoBM.state->preFilterSize = 5;
	stereoBM.state->preFilterCap = 61;
	stereoBM.state->minDisparity = -39;
	stereoBM.state->textureThreshold = 507;
	stereoBM.state->uniquenessRatio = 0;
	stereoBM.state->speckleWindowSize = 0;
	stereoBM.state->speckleRange = 8;
	stereoBM.state->disp12MaxDiff = 1;

	cvtColor(imagenIzq, imagenIzq1CH, CV_BGR2GRAY); //Convierte las imagenes a CV_8UC1 (1 canal)
	cvtColor(imagenDer, imagenDer1CH, CV_BGR2GRAY);

	stereoBM(imagenIzq1CH, imagenDer1CH, MapaDispBM);

	normalize(MapaDispBM, MapaDispBM_Norm, 0, 255, CV_MINMAX, CV_8U);

	imshow("Mapa de Disparidad StereoBM", MapaDispBM_Norm);
}

int main(int argc, char *argv[])
{
	Mat imagenIzq = imread("imgLeftRect.png");
	Mat imagenDer = imread("imgRightRect.png");

	correspondenciaBM(imagenIzq, imagenDer);

	waitKey(0);
	return 0;
}


