#include <opencv2/opencv.hpp>
#include <opencv2/gpu/gpu.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/calib3d/calib3d.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/contrib/contrib.hpp>
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <opencv/cxmisc.h>
#include <opencv/cvaux.h>
#include <vector>
#include <string>
#include <algorithm>
#include <ctype.h>

using namespace std;
using namespace cv;

void correspondenciaBIRCHFIELD(Mat &imagenIzq, Mat &imagenDer)
{
	IplImage _srcLeft = imagenIzq;
	IplImage _srcRight = imagenDer;
	IplImage* srcLeft = &_srcLeft;
	IplImage* srcRight = &_srcRight;
	IplImage* leftImage = cvCreateImage(cvGetSize(srcLeft), IPL_DEPTH_8U, 1);
	IplImage* rightImage = cvCreateImage(cvGetSize(srcRight), IPL_DEPTH_8U, 1);
	IplImage* depthImage = cvCreateImage(cvGetSize(srcRight), IPL_DEPTH_8U, 1);

	cvCvtColor(srcLeft, leftImage, CV_BGR2GRAY);
	cvCvtColor(srcRight, rightImage, CV_BGR2GRAY);

	cvFindStereoCorrespondence(leftImage, rightImage, CV_DISPARITY_BIRCHFIELD, depthImage, 250, 15, 5, 50, 50, 250);

	Mat MapaDipBIRCHFIELD(depthImage);

	imshow("Mapa de Disparidad BIRCHFIELD", MapaDipBIRCHFIELD);
	imwrite("MapaDisparidad.png", MapaDipBIRCHFIELD);
}

int main(int argc, char *argv[])
{
	Mat imagenIzq = imread("imgLeftRect.png");
	Mat imagenDer = imread("imgRightRect.png");

	correspondenciaBIRCHFIELD(imagenIzq, imagenDer);

	waitKey(0);
	return 0;
}


