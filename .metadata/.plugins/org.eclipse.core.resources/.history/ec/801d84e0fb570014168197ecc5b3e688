#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <iostream>
#include <stdio.h>

using namespace std;
using namespace cv;

/// Global Variables
Mat img; Mat templ; Mat result;
const char* image_window = "Source Image";
const char* result_window = "Result window";

int match_method;
int max_Trackbar = 5;

/// Function Headers
void MatchingMethod( int, void* );

/**
 * @function main
 */
int main( int, char** argv )
{
	/// Load image and template
	img = imread("foto.png", CV_LOAD_IMAGE_GRAYSCALE);
	templ = imread("imagen_lata.png", CV_LOAD_IMAGE_GRAYSCALE);

	/// Create windows
	namedWindow( image_window, WINDOW_AUTOSIZE );
	namedWindow( result_window, WINDOW_AUTOSIZE );

	cout << "llego 1" << endl;
	/// Create Trackbar
	const char* trackbar_label = "Method: \n 0: SQDIFF \n 1: SQDIFF NORMED \n 2: TM CCORR \n 3: TM CCORR NORMED \n 4: TM COEFF \n 5: TM COEFF NORMED";
	createTrackbar( trackbar_label, image_window, &match_method, max_Trackbar, MatchingMethod);

	cout << "llego 2" << endl;

	MatchingMethod( 0, 0 );

	cout << "llego 3" << endl;
	waitKey(0);
	return 0;
}

/**
 * @function MatchingMethod
 * @brief Trackbar callback
 */

void MatchingMethod( int, void* )
{
	/// Source image to display
	cout << "Entro a MatchingMethod 1" << endl;
	Mat img_display;
	img.copyTo( img_display );

	/// Create the result matrix
	int result_cols =  (img.size().height - templ.size().height + 1);
	int result_rows = (img.size().width - templ.size().width + 1);

	cout << "Entro a MatchingMethod 2" << endl;
	result.create(result_cols, result_rows, CV_32FC1);

	cout << "Entro a MatchingMethod 3" << endl;
	/// Do the Matching and Normalize
	matchTemplate(img, templ, result, match_method);
	cout << "Entro a MatchingMethod 4" << endl;
	normalize( result, result, 0, 1, NORM_MINMAX, -1, Mat() );
	cout << "Entro a MatchingMethod 5" << endl;

	/// Localizing the best match with minMaxLoc
	Point minLoc; Point maxLoc;
	Point matchLoc;
	double minVal; double maxVal;

	for(int k=1;k<=5;k++)
	{
		minMaxLoc( result, &minVal, &maxVal, &minLoc, &maxLoc, Mat() );

		// Lowest matches
		if( match_method  == CV_TM_SQDIFF || match_method == CV_TM_SQDIFF_NORMED )
		{
			result.at<float>(minLoc.x,minLoc.y)=1.0;
			result.at<float>(maxLoc.x,maxLoc.y)=1.0;
		}
		else
		{
			result.at<float>(minLoc.x,minLoc.y)=0.0;
			result.at<float>(maxLoc.x,maxLoc.y)=0.0;
		}

		/// For SQDIFF and SQDIFF_NORMED, the best matches are lower values. For all the other methods, the higher the better
		if( match_method  == CV_TM_SQDIFF || match_method == CV_TM_SQDIFF_NORMED )
		{ matchLoc = minLoc; }
		else
		{ matchLoc = maxLoc; }

		/// Show me what you got
		rectangle( img_display, matchLoc, Point( matchLoc.x + templ.cols , matchLoc.y + templ.rows ), Scalar::all(0), 2, 8, 0 );
		rectangle( result, matchLoc, Point( matchLoc.x + templ.cols , matchLoc.y + templ.rows ), Scalar::all(0), 2, 8, 0 );
	}
	imshow( image_window, img_display );
	imshow( result_window, result );

	return;
}
